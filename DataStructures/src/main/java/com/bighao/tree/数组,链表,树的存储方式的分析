为什么需要树这种数据结构？
    1.数组存储方式的分析优点：通过下标方式访问元素，速度快。对于有序数组，还可使用二分查找提高检索速度。
    缺点：如果要检索具体某个值，或者插入值(按一定顺序)会整体移动，效率较低 [示意图]

    2.链式存储方式的分析优点：在一定程度上对数组存储方式有优化(比如：插入一个数值节点，只需要将插入节点，链接到链表中即可， 删除效率也很好)。
    缺点：在进行检索时，效率仍然较低，比如(检索某个值，需要从头节点开始遍历) 【示意图】

    3.树存储方式的分析能提高数据存储，读取的效率,  比如利用 二叉排序树(Binary Sort Tree)，既可以保证数据的检索速度，
    同时也可以保证数据的插入，删除，修改的速度。【示意图,后面详讲】案例: [7, 3, 10, 1, 5, 9, 12]

树的常用术语(结合示意图理解):
    节点
    根节点
    父节点
    子节点
    叶子节点 (没有子节点的节点)
    节点的权(节点值)
    路径(从root节点找到该节点的路线)
    层
    子树
    树的高度(最大层数)
    森林 :多颗子树构成森林


二叉树的概念
    树有很多种，每个节点最多只能有两个子节点的一种形式称为二叉树。二叉树的子节点分为左节点和右节点。

    如果该二叉树的所有叶子节点都在最后一层，并且结点总数= 2^n -1 , n 为层数，则我们称为满二叉树。
    如果该二叉树的所有叶子节点都在最后一层或者倒数第二层，而且最后一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连续，我们称为完全

二叉树遍历
    前序遍历: 先输出父节点，再遍历左子树和右子树
    中序遍历: 先遍历左子树，再输出父节点，再遍历右子树
    后序遍历: 先遍历左子树，再遍历右子树，最后输出父节点
    小结: 看输出父节点的顺序，就确定是前序，中序还是后序

遍历步骤(非二叉顺序树):
    1.创建一个二叉树

    2.前序遍历
    2.1 先输出当前节点(初始的时候是root节点)
    2.2 如果左子节点不为空，则递归继续前序遍历
    2.3 如果右子节点不为空，则递归继续前序遍历

    3.中序遍历
    3.1 如果当前节点的左子节点不为空，则则递归中序遍历
    3.2 输出当前节点
    3.3 如果当前节点的右子节点不为空，则则递归中序遍历

    4.后序遍历
    4.1 如果当前节点的左子节点不为空，则则递归后序遍历
    4.2 如果当前节点的右子节点不为空，则则递归后序遍历
    4.3 输出当前节点


遍历查找思路(非二叉顺序树)
    前序遍历查找思路
    1.先判断当前节点的编号是否是要查找的
    2.如果相等就返回当前节点
    3.如果不等则判断当前节点的左子节点是否为空，如果不为空，则递归前序查找
    4.如果左递归前序查找，找到节点，则返回，否则继续判断，当前节点的右子节点是否为空，如果不空，则继续向右递归前序查找

    中序遍历查找思路
    1.判断当前节点的左子节点是否为空，如果不为空，则递归中序查找
    2.如果找到就返回，如果没有找到就和当前节点比较，如果是就返回当前节点，否则右递归中序查找，找到就返回，否则返回null

    后序遍历查找思路
    1.判断当前节点的左子节点是否为空，如果不为空，则递归后序查找
    2.如果找到，就返回，如果没有找到，就判断当前节点的右子节点是否为空，如果不为空，则右递归进行后序查找，如果找到，就返回
    3.就和当前节点进行比较，然后返回

删除节点思路(非二叉顺序树)
    规定:
    1).如果删除的节点是叶子节点，则删除该节点
    2).如果删除的节点是非叶子节点，则删除该子树
    思路:
    首先如果root就是要删除的，则将二叉树置空
    1.因为我们的二叉树的单向的，所以我们判断当前节点的子节点是否需要删除节点，而不能去判读当前这个节点是否是需要删除的节点
    2.如果当前节点的左子节点不为空，并且左子节点就是要删除的节点，就将this.left=null;并且就返回(结束递归删除)
    3.如果当前节点的右子节点不为空，并且右子节点就是要删除的节点，就将this.right=null;并且就返回(结束递归删除)
    4.如果第2和第3步没有删除节点，那么就向左子树进行递归
    5.如果第4步也没删除节点，就想向右子树递归
